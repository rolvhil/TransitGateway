---
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Transit gateway attachment and transit gateway connect creation

Parameters:

  TransportAttachmentID:
    Description: The attachment id of what will be the transport of the TGW connect attachment. Either VPC attachment id or DXGW attachment id
    Type: String
    Default: ''
  
  Tag:
    Description: name of the TGW connect attachment
    Type: String
    Default: ""

  TransitGatewayId:
    Description: Transit Gateway Id
    Type: String
    Default: ''

  PEpeerASN:
    Description: On premise appliance ASN
    Type: String
    Default: 7575
  
  InsideAddress:
    Description: GRE inside CIDR Block. This will be the connect BGP peer addresses
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-9]))$
    Default: 169.254.7.0/29  

  PEpeer:
    Description: On premise appliance Address for GRE 
    Type: String
    Default: 10.10.1.50

  TgwGREpeer:
    Description: CIDR address of TGW
    Type: String
    Default: 10.0.0.32
  
  VPCAttachment:
    Description: VPC attachment where CIDR to be advertised Onpremise
    Type: String
    Default: ''

Resources:

#######################
#Create TGW attachment#
#######################

  TgwConnectAttachment:
    Type: AWS::EC2::TransitGatewayConnect
    Properties: 
      Options: 
        Protocol: gre
      Tags: 
        - Key: Name
          Value: !Sub '${AWS::StackName}-attachment'
      TransportTransitGatewayAttachmentId: !Ref TransportAttachmentID

#############################################################
#Create TGW RTB with TWG connect association and propagation#
#############################################################

  TgwRouteTableId:
    Type: AWS::EC2::TransitGatewayRouteTable
    Properties: 
      Tags: 
        - Key: Name
          Value: !Sub '${AWS::StackName}-routingtable'
      TransitGatewayId: !Ref TransitGatewayId

  AssocConnect:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref TgwConnectAttachment
      TransitGatewayRouteTableId: !Ref TgwRouteTableId

  PropagationConnect:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref TgwConnectAttachment
      TransitGatewayRouteTableId: !Ref TgwRouteTableId

###################################################################################
#Propagate VPC on the RTB, this is the VPC CIDR you want to advertise on premise  #
###################################################################################

  VPCPropagationConnect:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref VPCAttachment
      TransitGatewayRouteTableId: !Ref TgwRouteTableId
  
################################################
#Create TGW connect peers using custom resource#
################################################

  TgwConnectPeer:
    Type: Custom::TgwConnectPeer
    Properties:
      ServiceToken: !GetAtt TgwConnectPeerFunction.Arn
      TransitGatewayAttachmentId: !Ref TgwConnectAttachment
      TransitGatewayAddress: !Ref TgwGREpeer
      PeerAddress: !Ref PEpeer
      PeerAsn: !Ref PEpeerASN
      InsideCidrBlocks: !Ref InsideAddress

############################################
#Lambda Function for creating connect peers#
############################################

  TgwConnectPeerFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        import sys
        import re
        import json
        import time
        import boto3
        import cfnresponse
        def lambda_handler(event, context):
            print(boto3.__version__)
            print('REQUEST RECEIVED:\n')
            print(json.dumps(event))
            response_data = {}
            try:
                ec2 = boto3.client('ec2')
                properties = event['ResourceProperties']
                if event['RequestType'] == 'Create':
                    tgw_connect_peer = ec2.create_transit_gateway_connect_peer(
                        TransitGatewayAttachmentId=properties['TransitGatewayAttachmentId'],
                        TransitGatewayAddress=properties['TransitGatewayAddress'],
                        PeerAddress=properties['PeerAddress'],
                        BgpOptions={
                            'PeerAsn': int(properties['PeerAsn'])
                        },
                        InsideCidrBlocks=[
                            properties['InsideCidrBlocks'],
                        ]
                    )['TransitGatewayConnectPeer']
                    peer_id = tgw_connect_peer['TransitGatewayConnectPeerId']
                    __wait_for_status(peer_id, 'available', ec2)
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, peer_id)
                    return
                if event['RequestType'] == 'Delete':
                    if re.match("tgw-connect-peer-[a-zA-Z0-9]+", event['PhysicalResourceId']):
                        ec2.delete_transit_gateway_connect_peer(
                            TransitGatewayConnectPeerId=event['PhysicalResourceId']
                        )
                        __wait_for_status(event['PhysicalResourceId'], 'deleted', ec2)
                        cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, event['PhysicalResourceId'])
                        return
                    else:
                        cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, event['PhysicalResourceId'])
                        return
                if event['RequestType'] == 'Read':
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, event['PhysicalResourceId'])
                    return
                if event['RequestType'] == 'Update':
                    if re.match("tgw-connect-peer-[a-zA-Z0-9]+", event['PhysicalResourceId']):
                        ec2.delete_transit_gateway_connect_peer(
                            TransitGatewayConnectPeerId=event['PhysicalResourceId']
                        )
                        __wait_for_status(event['PhysicalResourceId'], 'deleted', ec2)
                    tgw_connect_peer = ec2.create_transit_gateway_connect_peer(
                        TransitGatewayAttachmentId=properties['TransitGatewayAttachmentId'],
                        TransitGatewayAddress=properties['TransitGatewayAddress'],
                        PeerAddress=properties['PeerAddress'],
                        BgpOptions={
                            'PeerAsn': int(properties['PeerAsn'])
                        },
                        InsideCidrBlocks=[
                            properties['InsideCidrBlocks'],
                        ]
                    )['TransitGatewayConnectPeer']
                    peer_id = tgw_connect_peer['TransitGatewayConnectPeerId']
                    __wait_for_status(peer_id, 'available', ec2)
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, peer_id)
                    return
            except Exception as e:
                response_data = {'error': str(e)}
                cfnresponse.send(event, context, cfnresponse.FAILED, response_data, False, str(e))
                return
        def __wait_for_status(peer_id, status, ec2_client):
            while True:
                state = ec2_client.describe_transit_gateway_connect_peers(
                    TransitGatewayConnectPeerIds=[peer_id]
                )['TransitGatewayConnectPeers'][0]['State']
                if state == status:
                    break
                else:
                    time.sleep(10)
                    
      Handler: index.lambda_handler
      Runtime: python3.9
      Timeout: 600
      Policies:
      - Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - ec2:CreateTransitGatewayConnectPeer
          - ec2:DeleteTransitGatewayConnectPeer
          - ec2:List*
          - ec2:Get*
          - ec2:Describe*
          Resource: '*'